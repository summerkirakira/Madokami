/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddSubscriptionBody
 */
export interface AddSubscriptionBody {
    /**
     * 
     * @type {string}
     * @memberof AddSubscriptionBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AddSubscriptionBody
     */
    'data': string;
    /**
     * 
     * @type {string}
     * @memberof AddSubscriptionBody
     */
    'namespace': string;
}
/**
 * 
 * @export
 * @interface AllScheduledTasksResponse
 */
export interface AllScheduledTasksResponse {
    /**
     * 
     * @type {string}
     * @memberof AllScheduledTasksResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AllScheduledTasksResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AllScheduledTasksResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<Plugin>}
     * @memberof AllScheduledTasksResponse
     */
    'data'?: Array<Plugin>;
}
/**
 * 
 * @export
 * @interface Content
 */
export interface Content {
    /**
     * 
     * @type {string}
     * @memberof Content
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof Content
     */
    'episode': number;
    /**
     * 
     * @type {string}
     * @memberof Content
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof Content
     */
    'path': string;
    /**
     * 
     * @type {number}
     * @memberof Content
     */
    'add_time': number;
}
/**
 * 
 * @export
 * @interface DownloadData
 */
export interface DownloadData {
    /**
     * 
     * @type {string}
     * @memberof DownloadData
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof DownloadData
     */
    'is_metadata': boolean;
    /**
     * 
     * @type {string}
     * @memberof DownloadData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadData
     */
    'target_path': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadData
     */
    'dir': string;
    /**
     * 
     * @type {number}
     * @memberof DownloadData
     */
    'total_length': number;
    /**
     * 
     * @type {number}
     * @memberof DownloadData
     */
    'progress': number;
    /**
     * 
     * @type {number}
     * @memberof DownloadData
     */
    'current_download': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadData
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof DownloadData
     */
    'current_speed': number;
}
/**
 * 
 * @export
 * @interface DownloadItem
 */
export interface DownloadItem {
    /**
     * 
     * @type {string}
     * @memberof DownloadItem
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DownloadItem
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DownloadItem
     */
    'title'?: string;
    /**
     * 
     * @type {DownloadData}
     * @memberof DownloadItem
     */
    'data'?: DownloadData | null;
}
/**
 * 
 * @export
 * @interface DownloadResponse
 */
export interface DownloadResponse {
    /**
     * 
     * @type {string}
     * @memberof DownloadResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DownloadResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DownloadResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<DownloadData>}
     * @memberof DownloadResponse
     */
    'data'?: Array<DownloadData> | null;
}
/**
 * 
 * @export
 * @interface Engine
 */
export interface Engine {
    /**
     * 
     * @type {string}
     * @memberof Engine
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Engine
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Engine
     */
    'namespace': string;
    /**
     * 
     * @type {string}
     * @memberof Engine
     */
    'cron_str': string | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface InfoMessage
 */
export interface InfoMessage {
    /**
     * 
     * @type {string}
     * @memberof InfoMessage
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InfoMessage
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InfoMessage
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfoMessage
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface LogResponse
 */
export interface LogResponse {
    /**
     * 
     * @type {string}
     * @memberof LogResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LogResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LogResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LogResponse
     */
    'data'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {Array<Content>}
     * @memberof Media
     */
    'contents': Array<Content>;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    'bangumi_id': number | null;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    'season': number;
}
/**
 * 
 * @export
 * @interface MediaResponse
 */
export interface MediaResponse {
    /**
     * 
     * @type {string}
     * @memberof MediaResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MediaResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MediaResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Media}
     * @memberof MediaResponse
     */
    'data'?: Media | null;
}
/**
 * 
 * @export
 * @interface MediasResponse
 */
export interface MediasResponse {
    /**
     * 
     * @type {string}
     * @memberof MediasResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MediasResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MediasResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<Media>}
     * @memberof MediasResponse
     */
    'data'?: Array<Media> | null;
}
/**
 * 
 * @export
 * @interface MikanSearchPostBody
 */
export interface MikanSearchPostBody {
    /**
     * 
     * @type {string}
     * @memberof MikanSearchPostBody
     */
    'keyword': string;
}
/**
 * 
 * @export
 * @interface MikanSearchResponse
 */
export interface MikanSearchResponse {
    /**
     * 
     * @type {string}
     * @memberof MikanSearchResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MikanSearchResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MikanSearchResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<SearchItem>}
     * @memberof MikanSearchResponse
     */
    'data'?: Array<SearchItem>;
}
/**
 * 
 * @export
 * @interface Plugin
 */
export interface Plugin {
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'namespace': string;
    /**
     * 
     * @type {Array<ScheduledTask>}
     * @memberof Plugin
     */
    'tasks': Array<ScheduledTask>;
}
/**
 * 
 * @export
 * @interface PluginInfo
 */
export interface PluginInfo {
    /**
     * 
     * @type {string}
     * @memberof PluginInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PluginInfo
     */
    'namespace': string;
    /**
     * 
     * @type {string}
     * @memberof PluginInfo
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof PluginInfo
     */
    'is_local_plugin': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PluginInfo
     */
    'is_internal': boolean;
    /**
     * 
     * @type {Array<Engine>}
     * @memberof PluginInfo
     */
    'engines': Array<Engine>;
}
/**
 * 
 * @export
 * @interface PluginInfoResponse
 */
export interface PluginInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof PluginInfoResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PluginInfoResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PluginInfoResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<PluginInfo>}
     * @memberof PluginInfoResponse
     */
    'data'?: Array<PluginInfo>;
}
/**
 * 
 * @export
 * @interface RemoveSubscriptionBody
 */
export interface RemoveSubscriptionBody {
    /**
     * 
     * @type {string}
     * @memberof RemoveSubscriptionBody
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RemoveSubscriptionBody
     */
    'namespace': string;
}
/**
 * 
 * @export
 * @interface ScheduledTask
 */
export interface ScheduledTask {
    /**
     * 
     * @type {number}
     * @memberof ScheduledTask
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTask
     */
    'namespace': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTask
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTask
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTask
     */
    'cron_str': string | null;
}
/**
 * 
 * @export
 * @interface SearchItem
 */
export interface SearchItem {
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'cover': string;
    /**
     * 
     * @type {number}
     * @memberof SearchItem
     */
    'bangumi_id': number;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'bangumi_name': string;
    /**
     * 
     * @type {number}
     * @memberof SearchItem
     */
    'subtitle_group_id': number;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'subtitle_group_name': string;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'group_type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchItem
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'last_updated': string;
    /**
     * 
     * @type {boolean}
     * @memberof SearchItem
     */
    'is_checked'?: boolean;
}
/**
 * 
 * @export
 * @interface Setting
 */
export interface Setting {
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'value': string | null;
}
/**
 * 
 * @export
 * @interface SettingRecord
 */
export interface SettingRecord {
    /**
     * 
     * @type {string}
     * @memberof SettingRecord
     */
    'namespace': string;
    /**
     * 
     * @type {Array<Setting>}
     * @memberof SettingRecord
     */
    'settings': Array<Setting>;
}
/**
 * 
 * @export
 * @interface SettingsAllResponse
 */
export interface SettingsAllResponse {
    /**
     * 
     * @type {string}
     * @memberof SettingsAllResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SettingsAllResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SettingsAllResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<SettingRecord>}
     * @memberof SettingsAllResponse
     */
    'data'?: Array<SettingRecord> | null;
}
/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'data': string;
}
/**
 * 
 * @export
 * @interface SubscriptionRecord
 */
export interface SubscriptionRecord {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRecord
     */
    'namespace': string;
    /**
     * 
     * @type {Array<Subscription>}
     * @memberof SubscriptionRecord
     */
    'subscriptions': Array<Subscription>;
}
/**
 * 
 * @export
 * @interface SubscriptionsAllResponse
 */
export interface SubscriptionsAllResponse {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsAllResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionsAllResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsAllResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<SubscriptionRecord>}
     * @memberof SubscriptionsAllResponse
     */
    'data'?: Array<SubscriptionRecord> | null;
}
/**
 * 
 * @export
 * @interface UpdateCronBody
 */
export interface UpdateCronBody {
    /**
     * 
     * @type {number}
     * @memberof UpdateCronBody
     */
    'schedule_id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCronBody
     */
    'cron_str': string | null;
}
/**
 * 
 * @export
 * @interface UpdateSettingBody
 */
export interface UpdateSettingBody {
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingBody
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingBody
     */
    'value': string | null;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'username': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    'is_superuser': boolean;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Get Log All
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogAllV1AppRestartGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getLogAllV1AppRestartGet', 'xToken', xToken)
            const localVarPath = `/v1/app/restart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Get Log All
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogAllV1AppRestartGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogAllV1AppRestartGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.getLogAllV1AppRestartGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @summary  Get Log All
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogAllV1AppRestartGet(xToken: string, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.getLogAllV1AppRestartGet(xToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @summary  Get Log All
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getLogAllV1AppRestartGet(xToken: string, options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).getLogAllV1AppRestartGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Catch All
         * @param {string} fullPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catchAllWebuiFullPathGet: async (fullPath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fullPath' is not null or undefined
            assertParamExists('catchAllWebuiFullPathGet', 'fullPath', fullPath)
            const localVarPath = `/webui/{full_path}`
                .replace(`{${"full_path"}}`, encodeURIComponent(String(fullPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Catch All
         * @param {string} fullPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catchAllWebuiFullPathGet(fullPath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catchAllWebuiFullPathGet(fullPath, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.catchAllWebuiFullPathGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.indexGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Catch All
         * @param {string} fullPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catchAllWebuiFullPathGet(fullPath: string, options?: any): AxiosPromise<any> {
            return localVarFp.catchAllWebuiFullPathGet(fullPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGet(options?: any): AxiosPromise<any> {
            return localVarFp.indexGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Catch All
     * @param {string} fullPath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public catchAllWebuiFullPathGet(fullPath: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).catchAllWebuiFullPathGet(fullPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public indexGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).indexGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DownloadApi - axios parameter creator
 * @export
 */
export const DownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Clear Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearDownloadsV1DownloadClearPost: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('clearDownloadsV1DownloadClearPost', 'xToken', xToken)
            const localVarPath = `/v1/download/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadV1DownloadDownloadIdGet: async (downloadId: string, xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('getDownloadV1DownloadDownloadIdGet', 'downloadId', downloadId)
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getDownloadV1DownloadDownloadIdGet', 'xToken', xToken)
            const localVarPath = `/v1/download/{download_id}`
                .replace(`{${"download_id"}}`, encodeURIComponent(String(downloadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadsV1DownloadAllGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getDownloadsV1DownloadAllGet', 'xToken', xToken)
            const localVarPath = `/v1/download/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pause Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseDownloadV1DownloadPauseDownloadIdGet: async (downloadId: string, xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('pauseDownloadV1DownloadPauseDownloadIdGet', 'downloadId', downloadId)
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('pauseDownloadV1DownloadPauseDownloadIdGet', 'xToken', xToken)
            const localVarPath = `/v1/download/pause/{download_id}`
                .replace(`{${"download_id"}}`, encodeURIComponent(String(downloadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDownloadV1DownloadRemoveDownloadIdGet: async (downloadId: string, xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('removeDownloadV1DownloadRemoveDownloadIdGet', 'downloadId', downloadId)
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('removeDownloadV1DownloadRemoveDownloadIdGet', 'xToken', xToken)
            const localVarPath = `/v1/download/remove/{download_id}`
                .replace(`{${"download_id"}}`, encodeURIComponent(String(downloadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resume Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeDownloadV1DownloadResumeDownloadIdGet: async (downloadId: string, xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('resumeDownloadV1DownloadResumeDownloadIdGet', 'downloadId', downloadId)
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('resumeDownloadV1DownloadResumeDownloadIdGet', 'xToken', xToken)
            const localVarPath = `/v1/download/resume/{download_id}`
                .replace(`{${"download_id"}}`, encodeURIComponent(String(downloadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadApi - functional programming interface
 * @export
 */
export const DownloadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Clear Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearDownloadsV1DownloadClearPost(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearDownloadsV1DownloadClearPost(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.clearDownloadsV1DownloadClearPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloadV1DownloadDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloadV1DownloadDownloadIdGet(downloadId, xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.getDownloadV1DownloadDownloadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloadsV1DownloadAllGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloadsV1DownloadAllGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.getDownloadsV1DownloadAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pause Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseDownloadV1DownloadPauseDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseDownloadV1DownloadPauseDownloadIdGet(downloadId, xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.pauseDownloadV1DownloadPauseDownloadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDownloadV1DownloadRemoveDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDownloadV1DownloadRemoveDownloadIdGet(downloadId, xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.removeDownloadV1DownloadRemoveDownloadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Resume Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeDownloadV1DownloadResumeDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeDownloadV1DownloadResumeDownloadIdGet(downloadId, xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.resumeDownloadV1DownloadResumeDownloadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DownloadApi - factory interface
 * @export
 */
export const DownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadApiFp(configuration)
    return {
        /**
         * 
         * @summary  Clear Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearDownloadsV1DownloadClearPost(xToken: string, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.clearDownloadsV1DownloadClearPost(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadV1DownloadDownloadIdGet(downloadId: string, xToken: string, options?: any): AxiosPromise<DownloadItem> {
            return localVarFp.getDownloadV1DownloadDownloadIdGet(downloadId, xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadsV1DownloadAllGet(xToken: string, options?: any): AxiosPromise<DownloadResponse> {
            return localVarFp.getDownloadsV1DownloadAllGet(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pause Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseDownloadV1DownloadPauseDownloadIdGet(downloadId: string, xToken: string, options?: any): AxiosPromise<DownloadItem> {
            return localVarFp.pauseDownloadV1DownloadPauseDownloadIdGet(downloadId, xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDownloadV1DownloadRemoveDownloadIdGet(downloadId: string, xToken: string, options?: any): AxiosPromise<DownloadItem> {
            return localVarFp.removeDownloadV1DownloadRemoveDownloadIdGet(downloadId, xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resume Download
         * @param {string} downloadId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeDownloadV1DownloadResumeDownloadIdGet(downloadId: string, xToken: string, options?: any): AxiosPromise<DownloadItem> {
            return localVarFp.resumeDownloadV1DownloadResumeDownloadIdGet(downloadId, xToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadApi - object-oriented interface
 * @export
 * @class DownloadApi
 * @extends {BaseAPI}
 */
export class DownloadApi extends BaseAPI {
    /**
     * 
     * @summary  Clear Downloads
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public clearDownloadsV1DownloadClearPost(xToken: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).clearDownloadsV1DownloadClearPost(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Download
     * @param {string} downloadId 
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public getDownloadV1DownloadDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).getDownloadV1DownloadDownloadIdGet(downloadId, xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Downloads
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public getDownloadsV1DownloadAllGet(xToken: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).getDownloadsV1DownloadAllGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pause Download
     * @param {string} downloadId 
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public pauseDownloadV1DownloadPauseDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).pauseDownloadV1DownloadPauseDownloadIdGet(downloadId, xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Download
     * @param {string} downloadId 
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public removeDownloadV1DownloadRemoveDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).removeDownloadV1DownloadRemoveDownloadIdGet(downloadId, xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resume Download
     * @param {string} downloadId 
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public resumeDownloadV1DownloadResumeDownloadIdGet(downloadId: string, xToken: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).resumeDownloadV1DownloadResumeDownloadIdGet(downloadId, xToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EngineApi - axios parameter creator
 * @export
 */
export const EngineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Refresh All Engines
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAllEnginesV1EngineRunAllGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('refreshAllEnginesV1EngineRunAllGet', 'xToken', xToken)
            const localVarPath = `/v1/engine/run-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Run Engine
         * @param {string} engineNamespace 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runEngineV1EngineRunGet: async (engineNamespace: string, xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'engineNamespace' is not null or undefined
            assertParamExists('runEngineV1EngineRunGet', 'engineNamespace', engineNamespace)
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('runEngineV1EngineRunGet', 'xToken', xToken)
            const localVarPath = `/v1/engine/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (engineNamespace !== undefined) {
                localVarQueryParameter['engine_namespace'] = engineNamespace;
            }

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EngineApi - functional programming interface
 * @export
 */
export const EngineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EngineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Refresh All Engines
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshAllEnginesV1EngineRunAllGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshAllEnginesV1EngineRunAllGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EngineApi.refreshAllEnginesV1EngineRunAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Run Engine
         * @param {string} engineNamespace 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runEngineV1EngineRunGet(engineNamespace: string, xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runEngineV1EngineRunGet(engineNamespace, xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EngineApi.runEngineV1EngineRunGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EngineApi - factory interface
 * @export
 */
export const EngineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EngineApiFp(configuration)
    return {
        /**
         * 
         * @summary Refresh All Engines
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAllEnginesV1EngineRunAllGet(xToken: string, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.refreshAllEnginesV1EngineRunAllGet(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Run Engine
         * @param {string} engineNamespace 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runEngineV1EngineRunGet(engineNamespace: string, xToken: string, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.runEngineV1EngineRunGet(engineNamespace, xToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EngineApi - object-oriented interface
 * @export
 * @class EngineApi
 * @extends {BaseAPI}
 */
export class EngineApi extends BaseAPI {
    /**
     * 
     * @summary Refresh All Engines
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineApi
     */
    public refreshAllEnginesV1EngineRunAllGet(xToken: string, options?: RawAxiosRequestConfig) {
        return EngineApiFp(this.configuration).refreshAllEnginesV1EngineRunAllGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Run Engine
     * @param {string} engineNamespace 
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineApi
     */
    public runEngineV1EngineRunGet(engineNamespace: string, xToken: string, options?: RawAxiosRequestConfig) {
        return EngineApiFp(this.configuration).runEngineV1EngineRunGet(engineNamespace, xToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LogApi - axios parameter creator
 * @export
 */
export const LogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Get Log All
         * @param {string} xToken 
         * @param {string} [level] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogAllV1LogAllGet: async (xToken: string, level?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getLogAllV1LogAllGet', 'xToken', xToken)
            const localVarPath = `/v1/log/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Get Log All
         * @param {string} xToken 
         * @param {string} [level] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogAllV1LogAllGet(xToken: string, level?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogAllV1LogAllGet(xToken, level, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.getLogAllV1LogAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogApi - factory interface
 * @export
 */
export const LogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogApiFp(configuration)
    return {
        /**
         * 
         * @summary  Get Log All
         * @param {string} xToken 
         * @param {string} [level] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogAllV1LogAllGet(xToken: string, level?: string, limit?: number, options?: any): AxiosPromise<LogResponse> {
            return localVarFp.getLogAllV1LogAllGet(xToken, level, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export class LogApi extends BaseAPI {
    /**
     * 
     * @summary  Get Log All
     * @param {string} xToken 
     * @param {string} [level] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public getLogAllV1LogAllGet(xToken: string, level?: string, limit?: number, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).getLogAllV1LogAllGet(xToken, level, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Get All Media
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMediaV1MediaAllGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getAllMediaV1MediaAllGet', 'xToken', xToken)
            const localVarPath = `/v1/media/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Get Cover Image
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverImageV1MediaCoverMediaIdGet: async (mediaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaId' is not null or undefined
            assertParamExists('getCoverImageV1MediaCoverMediaIdGet', 'mediaId', mediaId)
            const localVarPath = `/v1/media/cover/{media_id}`
                .replace(`{${"media_id"}}`, encodeURIComponent(String(mediaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Get Media
         * @param {string} mediaId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaV1MediaMediaIdGet: async (mediaId: string, xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaId' is not null or undefined
            assertParamExists('getMediaV1MediaMediaIdGet', 'mediaId', mediaId)
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getMediaV1MediaMediaIdGet', 'xToken', xToken)
            const localVarPath = `/v1/media/{media_id}`
                .replace(`{${"media_id"}}`, encodeURIComponent(String(mediaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Get All Media
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMediaV1MediaAllGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediasResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMediaV1MediaAllGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.getAllMediaV1MediaAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Get Cover Image
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoverImageV1MediaCoverMediaIdGet(mediaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoverImageV1MediaCoverMediaIdGet(mediaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.getCoverImageV1MediaCoverMediaIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Get Media
         * @param {string} mediaId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaV1MediaMediaIdGet(mediaId: string, xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaV1MediaMediaIdGet(mediaId, xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.getMediaV1MediaMediaIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * 
         * @summary  Get All Media
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMediaV1MediaAllGet(xToken: string, options?: any): AxiosPromise<MediasResponse> {
            return localVarFp.getAllMediaV1MediaAllGet(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Get Cover Image
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverImageV1MediaCoverMediaIdGet(mediaId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getCoverImageV1MediaCoverMediaIdGet(mediaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Get Media
         * @param {string} mediaId 
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaV1MediaMediaIdGet(mediaId: string, xToken: string, options?: any): AxiosPromise<MediaResponse> {
            return localVarFp.getMediaV1MediaMediaIdGet(mediaId, xToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * 
     * @summary  Get All Media
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getAllMediaV1MediaAllGet(xToken: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).getAllMediaV1MediaAllGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Get Cover Image
     * @param {string} mediaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getCoverImageV1MediaCoverMediaIdGet(mediaId: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).getCoverImageV1MediaCoverMediaIdGet(mediaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Get Media
     * @param {string} mediaId 
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMediaV1MediaMediaIdGet(mediaId: string, xToken: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).getMediaV1MediaMediaIdGet(mediaId, xToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MikanApi - axios parameter creator
 * @export
 */
export const MikanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Run Engine
         * @param {string} xToken 
         * @param {MikanSearchPostBody} mikanSearchPostBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runEngineV1MikanSearchPost: async (xToken: string, mikanSearchPostBody: MikanSearchPostBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('runEngineV1MikanSearchPost', 'xToken', xToken)
            // verify required parameter 'mikanSearchPostBody' is not null or undefined
            assertParamExists('runEngineV1MikanSearchPost', 'mikanSearchPostBody', mikanSearchPostBody)
            const localVarPath = `/v1/mikan/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mikanSearchPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MikanApi - functional programming interface
 * @export
 */
export const MikanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MikanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Run Engine
         * @param {string} xToken 
         * @param {MikanSearchPostBody} mikanSearchPostBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runEngineV1MikanSearchPost(xToken: string, mikanSearchPostBody: MikanSearchPostBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MikanSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runEngineV1MikanSearchPost(xToken, mikanSearchPostBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MikanApi.runEngineV1MikanSearchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MikanApi - factory interface
 * @export
 */
export const MikanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MikanApiFp(configuration)
    return {
        /**
         * 
         * @summary Run Engine
         * @param {string} xToken 
         * @param {MikanSearchPostBody} mikanSearchPostBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runEngineV1MikanSearchPost(xToken: string, mikanSearchPostBody: MikanSearchPostBody, options?: any): AxiosPromise<MikanSearchResponse> {
            return localVarFp.runEngineV1MikanSearchPost(xToken, mikanSearchPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MikanApi - object-oriented interface
 * @export
 * @class MikanApi
 * @extends {BaseAPI}
 */
export class MikanApi extends BaseAPI {
    /**
     * 
     * @summary Run Engine
     * @param {string} xToken 
     * @param {MikanSearchPostBody} mikanSearchPostBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MikanApi
     */
    public runEngineV1MikanSearchPost(xToken: string, mikanSearchPostBody: MikanSearchPostBody, options?: RawAxiosRequestConfig) {
        return MikanApiFp(this.configuration).runEngineV1MikanSearchPost(xToken, mikanSearchPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PluginApi - axios parameter creator
 * @export
 */
export const PluginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Run Engine
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runEngineV1PluginInfoGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('runEngineV1PluginInfoGet', 'xToken', xToken)
            const localVarPath = `/v1/plugin/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginApi - functional programming interface
 * @export
 */
export const PluginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PluginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Run Engine
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runEngineV1PluginInfoGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runEngineV1PluginInfoGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.runEngineV1PluginInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PluginApi - factory interface
 * @export
 */
export const PluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PluginApiFp(configuration)
    return {
        /**
         * 
         * @summary Run Engine
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runEngineV1PluginInfoGet(xToken: string, options?: any): AxiosPromise<PluginInfoResponse> {
            return localVarFp.runEngineV1PluginInfoGet(xToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PluginApi - object-oriented interface
 * @export
 * @class PluginApi
 * @extends {BaseAPI}
 */
export class PluginApi extends BaseAPI {
    /**
     * 
     * @summary Run Engine
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public runEngineV1PluginInfoGet(xToken: string, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).runEngineV1PluginInfoGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SchedulerApi - axios parameter creator
 * @export
 */
export const SchedulerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Schedules
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedulesV1ScheduleAllGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getAllSchedulesV1ScheduleAllGet', 'xToken', xToken)
            const localVarPath = `/v1/schedule/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restart Scheduler
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartSchedulerV1ScheduleRestartGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('restartSchedulerV1ScheduleRestartGet', 'xToken', xToken)
            const localVarPath = `/v1/schedule/restart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Schedule
         * @param {string} xToken 
         * @param {UpdateCronBody} updateCronBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleV1ScheduleUpdatePost: async (xToken: string, updateCronBody: UpdateCronBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('updateScheduleV1ScheduleUpdatePost', 'xToken', xToken)
            // verify required parameter 'updateCronBody' is not null or undefined
            assertParamExists('updateScheduleV1ScheduleUpdatePost', 'updateCronBody', updateCronBody)
            const localVarPath = `/v1/schedule/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCronBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchedulerApi - functional programming interface
 * @export
 */
export const SchedulerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchedulerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Schedules
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSchedulesV1ScheduleAllGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllScheduledTasksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSchedulesV1ScheduleAllGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchedulerApi.getAllSchedulesV1ScheduleAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restart Scheduler
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restartSchedulerV1ScheduleRestartGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restartSchedulerV1ScheduleRestartGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchedulerApi.restartSchedulerV1ScheduleRestartGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Schedule
         * @param {string} xToken 
         * @param {UpdateCronBody} updateCronBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduleV1ScheduleUpdatePost(xToken: string, updateCronBody: UpdateCronBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduleV1ScheduleUpdatePost(xToken, updateCronBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchedulerApi.updateScheduleV1ScheduleUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchedulerApi - factory interface
 * @export
 */
export const SchedulerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchedulerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Schedules
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedulesV1ScheduleAllGet(xToken: string, options?: any): AxiosPromise<AllScheduledTasksResponse> {
            return localVarFp.getAllSchedulesV1ScheduleAllGet(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restart Scheduler
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartSchedulerV1ScheduleRestartGet(xToken: string, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.restartSchedulerV1ScheduleRestartGet(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Schedule
         * @param {string} xToken 
         * @param {UpdateCronBody} updateCronBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleV1ScheduleUpdatePost(xToken: string, updateCronBody: UpdateCronBody, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.updateScheduleV1ScheduleUpdatePost(xToken, updateCronBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchedulerApi - object-oriented interface
 * @export
 * @class SchedulerApi
 * @extends {BaseAPI}
 */
export class SchedulerApi extends BaseAPI {
    /**
     * 
     * @summary Get All Schedules
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulerApi
     */
    public getAllSchedulesV1ScheduleAllGet(xToken: string, options?: RawAxiosRequestConfig) {
        return SchedulerApiFp(this.configuration).getAllSchedulesV1ScheduleAllGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restart Scheduler
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulerApi
     */
    public restartSchedulerV1ScheduleRestartGet(xToken: string, options?: RawAxiosRequestConfig) {
        return SchedulerApiFp(this.configuration).restartSchedulerV1ScheduleRestartGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Schedule
     * @param {string} xToken 
     * @param {UpdateCronBody} updateCronBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulerApi
     */
    public updateScheduleV1ScheduleUpdatePost(xToken: string, updateCronBody: UpdateCronBody, options?: RawAxiosRequestConfig) {
        return SchedulerApiFp(this.configuration).updateScheduleV1ScheduleUpdatePost(xToken, updateCronBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Settings
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsV1SettingsAllGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getSettingsV1SettingsAllGet', 'xToken', xToken)
            const localVarPath = `/v1/settings/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Settings
         * @param {string} xToken 
         * @param {UpdateSettingBody} updateSettingBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingsV1SettingsUpdatePost: async (xToken: string, updateSettingBody: UpdateSettingBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('updateSettingsV1SettingsUpdatePost', 'xToken', xToken)
            // verify required parameter 'updateSettingBody' is not null or undefined
            assertParamExists('updateSettingsV1SettingsUpdatePost', 'updateSettingBody', updateSettingBody)
            const localVarPath = `/v1/settings/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSettingBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Settings
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingsV1SettingsAllGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingsV1SettingsAllGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.getSettingsV1SettingsAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Settings
         * @param {string} xToken 
         * @param {UpdateSettingBody} updateSettingBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettingsV1SettingsUpdatePost(xToken: string, updateSettingBody: UpdateSettingBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettingsV1SettingsUpdatePost(xToken, updateSettingBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.updateSettingsV1SettingsUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Settings
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsV1SettingsAllGet(xToken: string, options?: any): AxiosPromise<SettingsAllResponse> {
            return localVarFp.getSettingsV1SettingsAllGet(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Settings
         * @param {string} xToken 
         * @param {UpdateSettingBody} updateSettingBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingsV1SettingsUpdatePost(xToken: string, updateSettingBody: UpdateSettingBody, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.updateSettingsV1SettingsUpdatePost(xToken, updateSettingBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @summary Get Settings
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getSettingsV1SettingsAllGet(xToken: string, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).getSettingsV1SettingsAllGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Settings
     * @param {string} xToken 
     * @param {UpdateSettingBody} updateSettingBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public updateSettingsV1SettingsUpdatePost(xToken: string, updateSettingBody: UpdateSettingBody, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).updateSettingsV1SettingsUpdatePost(xToken, updateSettingBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubscribeApi - axios parameter creator
 * @export
 */
export const SubscribeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Subscription
         * @param {string} xToken 
         * @param {AddSubscriptionBody} addSubscriptionBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionV1SubscribeAddPost: async (xToken: string, addSubscriptionBody: AddSubscriptionBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('addSubscriptionV1SubscribeAddPost', 'xToken', xToken)
            // verify required parameter 'addSubscriptionBody' is not null or undefined
            assertParamExists('addSubscriptionV1SubscribeAddPost', 'addSubscriptionBody', addSubscriptionBody)
            const localVarPath = `/v1/subscribe/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSubscriptionBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadsV1SubscribeAllGet: async (xToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('getDownloadsV1SubscribeAllGet', 'xToken', xToken)
            const localVarPath = `/v1/subscribe/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Subscription
         * @param {string} xToken 
         * @param {RemoveSubscriptionBody} removeSubscriptionBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionV1SubscribeRemovePost: async (xToken: string, removeSubscriptionBody: RemoveSubscriptionBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('removeSubscriptionV1SubscribeRemovePost', 'xToken', xToken)
            // verify required parameter 'removeSubscriptionBody' is not null or undefined
            assertParamExists('removeSubscriptionV1SubscribeRemovePost', 'removeSubscriptionBody', removeSubscriptionBody)
            const localVarPath = `/v1/subscribe/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeSubscriptionBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscribeApi - functional programming interface
 * @export
 */
export const SubscribeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscribeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Subscription
         * @param {string} xToken 
         * @param {AddSubscriptionBody} addSubscriptionBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubscriptionV1SubscribeAddPost(xToken: string, addSubscriptionBody: AddSubscriptionBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubscriptionV1SubscribeAddPost(xToken, addSubscriptionBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscribeApi.addSubscriptionV1SubscribeAddPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloadsV1SubscribeAllGet(xToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloadsV1SubscribeAllGet(xToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscribeApi.getDownloadsV1SubscribeAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Subscription
         * @param {string} xToken 
         * @param {RemoveSubscriptionBody} removeSubscriptionBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSubscriptionV1SubscribeRemovePost(xToken: string, removeSubscriptionBody: RemoveSubscriptionBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSubscriptionV1SubscribeRemovePost(xToken, removeSubscriptionBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscribeApi.removeSubscriptionV1SubscribeRemovePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubscribeApi - factory interface
 * @export
 */
export const SubscribeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscribeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Subscription
         * @param {string} xToken 
         * @param {AddSubscriptionBody} addSubscriptionBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionV1SubscribeAddPost(xToken: string, addSubscriptionBody: AddSubscriptionBody, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.addSubscriptionV1SubscribeAddPost(xToken, addSubscriptionBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Downloads
         * @param {string} xToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadsV1SubscribeAllGet(xToken: string, options?: any): AxiosPromise<SubscriptionsAllResponse> {
            return localVarFp.getDownloadsV1SubscribeAllGet(xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Subscription
         * @param {string} xToken 
         * @param {RemoveSubscriptionBody} removeSubscriptionBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionV1SubscribeRemovePost(xToken: string, removeSubscriptionBody: RemoveSubscriptionBody, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.removeSubscriptionV1SubscribeRemovePost(xToken, removeSubscriptionBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscribeApi - object-oriented interface
 * @export
 * @class SubscribeApi
 * @extends {BaseAPI}
 */
export class SubscribeApi extends BaseAPI {
    /**
     * 
     * @summary Add Subscription
     * @param {string} xToken 
     * @param {AddSubscriptionBody} addSubscriptionBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribeApi
     */
    public addSubscriptionV1SubscribeAddPost(xToken: string, addSubscriptionBody: AddSubscriptionBody, options?: RawAxiosRequestConfig) {
        return SubscribeApiFp(this.configuration).addSubscriptionV1SubscribeAddPost(xToken, addSubscriptionBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Downloads
     * @param {string} xToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribeApi
     */
    public getDownloadsV1SubscribeAllGet(xToken: string, options?: RawAxiosRequestConfig) {
        return SubscribeApiFp(this.configuration).getDownloadsV1SubscribeAllGet(xToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Subscription
     * @param {string} xToken 
     * @param {RemoveSubscriptionBody} removeSubscriptionBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribeApi
     */
    public removeSubscriptionV1SubscribeRemovePost(xToken: string, removeSubscriptionBody: RemoveSubscriptionBody, options?: RawAxiosRequestConfig) {
        return SubscribeApiFp(this.configuration).removeSubscriptionV1SubscribeRemovePost(xToken, removeSubscriptionBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Create User
         * @param {string} xToken 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserV1UserCreatePost: async (xToken: string, userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            assertParamExists('createUserV1UserCreatePost', 'xToken', xToken)
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createUserV1UserCreatePost', 'userCreate', userCreate)
            const localVarPath = `/v1/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xToken != null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UserAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  User Login
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginV1UserLoginPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('userLoginV1UserLoginPost', 'userCreate', userCreate)
            const localVarPath = `/v1/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Create User
         * @param {string} xToken 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserV1UserCreatePost(xToken: string, userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserV1UserCreatePost(xToken, userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUserV1UserCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersV1UserAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersV1UserAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUsersV1UserAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  User Login
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLoginV1UserLoginPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLoginV1UserLoginPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userLoginV1UserLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary  Create User
         * @param {string} xToken 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserV1UserCreatePost(xToken: string, userCreate: UserCreate, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.createUserV1UserCreatePost(xToken, userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UserAllGet(options?: any): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getUsersV1UserAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  User Login
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginV1UserLoginPost(userCreate: UserCreate, options?: any): AxiosPromise<InfoMessage> {
            return localVarFp.userLoginV1UserLoginPost(userCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary  Create User
     * @param {string} xToken 
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserV1UserCreatePost(xToken: string, userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUserV1UserCreatePost(xToken, userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsersV1UserAllGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsersV1UserAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  User Login
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLoginV1UserLoginPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userLoginV1UserLoginPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



