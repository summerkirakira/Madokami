/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  InfoMessage,
  UserCreate,
  UserResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InfoMessageFromJSON,
    InfoMessageToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models/index';

export interface CreateUserV1UserCreatePostRequest {
    userCreate: UserCreate;
}

export interface UserLoginV1userLoginPostRequest {
    userCreate: UserCreate;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     *  Create User
     */
    async createUserV1UserCreatePostRaw(requestParameters: CreateUserV1UserCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoMessage>> {
        if (requestParameters['userCreate'] == null) {
            throw new runtime.RequiredError(
                'userCreate',
                'Required parameter "userCreate" was null or undefined when calling createUserV1UserCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/user/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters['userCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoMessageFromJSON(jsonValue));
    }

    /**
     *  Create User
     */
    async createUserV1UserCreatePost(requestParameters: CreateUserV1UserCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoMessage> {
        const response = await this.createUserV1UserCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get Users
     */
    async getUsersV1UserAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/user/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseFromJSON));
    }

    /**
     *  Get Users
     */
    async getUsersV1UserAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponse>> {
        const response = await this.getUsersV1UserAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     *  User Login
     */
    async userLoginV1userLoginPostRaw(requestParameters: UserLoginV1userLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoMessage>> {
        if (requestParameters['userCreate'] == null) {
            throw new runtime.RequiredError(
                'userCreate',
                'Required parameter "userCreate" was null or undefined when calling userLoginV1userLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters['userCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoMessageFromJSON(jsonValue));
    }

    /**
     *  User Login
     */
    async userLoginV1userLoginPost(requestParameters: UserLoginV1userLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoMessage> {
        const response = await this.userLoginV1userLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
