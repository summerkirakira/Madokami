/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MediaResponse,
  MediasResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MediaResponseFromJSON,
    MediaResponseToJSON,
    MediasResponseFromJSON,
    MediasResponseToJSON,
} from '../models/index';

export interface GetAllMediaV1MediaAllGetRequest {
    xToken: string;
}

export interface GetCoverImageV1MediaCoverMediaIdGetRequest {
    mediaId: string;
}

export interface GetMediaV1MediaMediaIdGetRequest {
    mediaId: string;
    xToken: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     *  Get All Media
     */
    async getAllMediaV1MediaAllGetRaw(requestParameters: GetAllMediaV1MediaAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediasResponse>> {
        if (requestParameters['xToken'] == null) {
            throw new runtime.RequiredError(
                'xToken',
                'Required parameter "xToken" was null or undefined when calling getAllMediaV1MediaAllGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xToken'] != null) {
            headerParameters['x-token'] = String(requestParameters['xToken']);
        }

        const response = await this.request({
            path: `/v1/media/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediasResponseFromJSON(jsonValue));
    }

    /**
     *  Get All Media
     */
    async getAllMediaV1MediaAllGet(requestParameters: GetAllMediaV1MediaAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediasResponse> {
        const response = await this.getAllMediaV1MediaAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get Cover Image
     */
    async getCoverImageV1MediaCoverMediaIdGetRaw(requestParameters: GetCoverImageV1MediaCoverMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['mediaId'] == null) {
            throw new runtime.RequiredError(
                'mediaId',
                'Required parameter "mediaId" was null or undefined when calling getCoverImageV1MediaCoverMediaIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/media/cover/{media_id}`.replace(`{${"media_id"}}`, encodeURIComponent(String(requestParameters['mediaId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     *  Get Cover Image
     */
    async getCoverImageV1MediaCoverMediaIdGet(requestParameters: GetCoverImageV1MediaCoverMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getCoverImageV1MediaCoverMediaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get Media
     */
    async getMediaV1MediaMediaIdGetRaw(requestParameters: GetMediaV1MediaMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaResponse>> {
        if (requestParameters['mediaId'] == null) {
            throw new runtime.RequiredError(
                'mediaId',
                'Required parameter "mediaId" was null or undefined when calling getMediaV1MediaMediaIdGet().'
            );
        }

        if (requestParameters['xToken'] == null) {
            throw new runtime.RequiredError(
                'xToken',
                'Required parameter "xToken" was null or undefined when calling getMediaV1MediaMediaIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xToken'] != null) {
            headerParameters['x-token'] = String(requestParameters['xToken']);
        }

        const response = await this.request({
            path: `/v1/media/{media_id}`.replace(`{${"media_id"}}`, encodeURIComponent(String(requestParameters['mediaId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaResponseFromJSON(jsonValue));
    }

    /**
     *  Get Media
     */
    async getMediaV1MediaMediaIdGet(requestParameters: GetMediaV1MediaMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaResponse> {
        const response = await this.getMediaV1MediaMediaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
